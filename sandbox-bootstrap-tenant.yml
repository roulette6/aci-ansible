---
# This playbook is meant to be a simple bootstrap of an ACI sandbox
# once the fabric has been discovered. The playbook expects a small
# fabric with spine-201, leaf-201, and leaf-202. The playbook will
# create the following:

# FABRIC:
# Three leaf switch profiles and leaf interface profiles, two
# access port selectors, and one vPC port selector, with
# corresponding IPG requirements.

# TENANT:
# One tenant, VRF, BD, AP, and EPG. Static path bindings to
# all three interfaces.

# ansible-playbook sandbox-bootstrap-tenant.yml --extra-vars "apic=aci.vm.jm"

- name: "Create tenant components"
  hosts: "{{ apic }}"
  ignore_errors: true

  vars:
    login_info: &login_info
      host: "{{ inventory_hostname }}"
      username: "{{ ansible_user }}"
      password: "{{ ansible_password }}"
      validate_certs: false
    tenant: DiamondDogs
    vrf: DD_vrf
    bd:
      name: DD_bd
      mac_addr: "00:22:BD:F8:19:FE"
    ap: DD_ap
    epg: DD_epg
    vlan_id: 666
    descr: "Created by Ansible for Diamond Dogs"
    static_paths:
      encap_id: 666
      immediacy: immediate
      pod_id: 1
      paths:
        - leafs: 201
          intf_type: switch_port
          intf: "1/2"
          intf_mode: untagged
        - leafs: 202
          intf_type: switch_port
          intf: "1/2"
          intf_mode: 802.1p
        - leafs: 201-202
          intf_type: vpc
          intf: "eth1_1_core-fw01"
          intf_mode: tagged
    vlan_pool: DD_vlan-pool
    block_start: 660
    block_end: 669
    domain: DD_domain
    domain_type: phys

  tasks:
    - name: "Create {{ tenant }} tenant"
      aci_tenant:
        <<: *login_info

        annotation: "orchestrator:ansible"
        tenant: "{{ tenant }}"
        description: "{{ descr }}"
        state: present
      delegate_to: localhost

    - name: "Create {{ vrf }} VRF"
      aci_vrf:
        <<: *login_info

        annotation: "orchestrator:ansible"
        tenant: "{{ tenant }}"
        vrf: "{{ vrf }}"
        description: "{{ descr }}"
        state: present
      delegate_to: localhost

    - name: "Create {{ bd.name }} bridge domain"
      aci_bd:
        <<: *login_info

        annotation: "orchestrator:ansible"
        tenant: "{{ tenant }}"
        vrf: "{{ vrf }}"
        bd: "{{ bd.name }}"
        mac_address: "{{ bd.mac_addr }}"
        description: "{{ descr }}"
        state: present
      delegate_to: localhost

    - name: "Create {{ ap }} application profile"
      aci_ap:
        <<: *login_info

        annotation: "orchestrator:ansible"
        tenant: "{{ tenant }}"
        ap: "{{ ap }}"
        description: "{{ descr }}"
        state: present
      delegate_to: localhost

    - name: "Create {{ epg }} end point group"
      aci_epg:
        <<: *login_info

        annotation: "orchestrator:ansible"
        tenant: "{{ tenant }}"
        bd: "{{ bd.name }}"
        ap: "{{ ap }}"
        epg: "{{ epg }}"
        description: "{{ descr }}"
        state: present
      delegate_to: localhost

    - name: "Bind {{ epg }} to {{ domain }}"
      aci_epg_to_domain:
        <<: *login_info

        annotation: "orchestrator:ansible"
        tenant: "{{ tenant }}"
        ap: "{{ ap }}"
        epg: "{{ epg }}"
        domain: "{{ domain }}"
        domain_type: "{{ domain_type }}"
        state: present
      delegate_to: localhost

    - name: "Create static path bindings for {{ epg }}"
      aci_static_binding_to_epg:
        <<: *login_info

        annotation: "orchestrator:ansible"
        tenant: "{{ tenant }}"
        ap: "{{ ap }}"
        epg: "{{ epg }}"
        pod_id: "{{ static_paths.pod_id }}"
        leafs: "{{ item.leafs }}"
        interface_type: "{{ item.intf_type }}"
        interface_mode: "{{ item.intf_mode }}"
        interface: "{{ item.intf }}"
        encap_id: "{{ static_paths.encap_id }}"
        deploy_immediacy: "{{ static_paths.immediacy }}"
        state: present
      delegate_to: localhost
      with_items: "{{ static_paths.paths }}"
