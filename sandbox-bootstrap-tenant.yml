---
# This playbook is meant to be a simple bootstrap of an ACI sandbox
# once the fabric has been discovered. The playbook expects a small
# fabric with spine-201, leaf-201, and leaf-202. The playbook will
# create the following:

# TENANT:
# One tenant, VRF, BD, AP, and EPG. Static path bindings to
# all three interfaces.

# ansible-playbook sandbox-bootstrap-tenant.yml --extra-vars "apic=aci-sandbox"

- name: Create tenant components
  hosts: "{{ apic }}"
  ignore_errors: false
  vars:
    login_info: &login_info
      host: "{{ host_fqdn }}"
      username: "{{ ansible_user }}"
      password: "{{ ansible_password }}"
      validate_certs: false

  tasks:

    - name: Create tenants
      aci_tenant:
        <<: *login_info

        annotation: "orchestrator:ansible"
        tenant: "{{ item.tenant }}"
        description: "{{ item.descr }}"
        state: present
      delegate_to: localhost
      with_items: "{{ tenants }}"
      loop_control:
        pause: 1


    - name: Create VRFs
      aci_vrf:
        <<: *login_info

        annotation: "orchestrator:ansible"
        tenant: "{{ item.tenant }}"
        vrf: "{{ item.vrf }}"
        description: "{{ item.descr }}"
        state: present
      delegate_to: localhost
      with_items: "{{ tenants }}"


    - name: Create bridge domains
      aci_bd:
        <<: *login_info

        annotation: "orchestrator:ansible"
        tenant: "{{ item.tenant }}"
        vrf: "{{ item.vrf }}"
        bd: "{{ item.bd }}"
        description: "{{ item.descr }}"
        state: present
      delegate_to: localhost
      with_items: "{{ tenants }}"
      loop_control:
        pause: 1

    - name: Create application profiles
      aci_ap:
        <<: *login_info

        annotation: "orchestrator:ansible"
        tenant: "{{ item.tenant }}"
        ap: "{{ item.ap }}"
        description: "{{ item.descr }}"
        state: present
      delegate_to: localhost
      with_items: "{{ tenants }}"
      loop_control:
        pause: 1


    - name: Create end point groups
      aci_epg:
        <<: *login_info

        annotation: "orchestrator:ansible"
        tenant: "{{ item.tenant }}"
        bd: "{{ item.bd }}"
        ap: "{{ item.ap }}"
        epg: "{{ item.epg }}"
        description: "{{ item.descr }}"
        state: present
      delegate_to: localhost
      with_items: "{{ tenants }}"
      loop_control:
        pause: 1


    - name: Bind EPGs to domain
      aci_epg_to_domain:
        <<: *login_info

        annotation: "orchestrator:ansible"
        tenant: "{{ item.tenant }}"
        ap: "{{ item.ap }}"
        epg: "{{ item.epg }}"
        domain: "{{ domain_name }}"
        domain_type: "{{ domain_type }}"
        state: present
      delegate_to: localhost
      with_items: "{{ tenants }}"
      loop_control:
        pause: 1


    - name: Create static path bindings
      aci_static_binding_to_epg:
        <<: *login_info

        annotation: "orchestrator:ansible"
        tenant: "{{ item.tenant }}"
        ap: "{{ item.ap }}"
        epg: "{{ item.epg }}"
        pod_id: "{{ item.pod_id }}"
        leafs: "{{ item.leafs }}"
        interface_type: "{{ item.intf_type }}"
        interface_mode: "{{ item.intf_mode }}"
        interface: "{{ item.intf }}"
        encap_id: "{{ item.encap_id }}"
        deploy_immediacy: "{{ item.immediacy }}"
        state: present
      delegate_to: localhost
      with_items:
        - "{{ tenants[0].static_paths }}"
        - "{{ tenants[1].static_paths }}"
        - "{{ tenants[2].static_paths }}"
      tags: spath
